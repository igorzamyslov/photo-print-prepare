import urllib.parse
from typing import Any, Dict

from photo_handler import logger
from . import BasicConfig
from .base import ConfigEntry, ConfigEntryError


class MidjourneyConfig(BasicConfig):
    """
    Config which takes CSV generated by webscrapper from midjourney website.
    It parses the URLs and converts them to the format
    which links to the high-quality image.

    Columns:
    - web-scraper-start-url - parsed to get category
    - image-src - parsed to get link to the image
    - prompt - prompt that was used to generate it
    """

    @staticmethod
    def _extract_url_parameter(url_string) -> str:
        # Parse the URL string and get the "url" parameter value
        parsed_url = urllib.parse.urlparse(url_string)
        url_param = urllib.parse.parse_qs(str(parsed_url.query)).get("url", None)
        if url_param:
            # Decode the URL parameter value
            decoded_url = urllib.parse.unquote(url_param[0])
            return decoded_url
        raise ConfigEntryError("Expected url query parameter: %s", url_string)

    @staticmethod
    def _transform_url(url: str) -> str:
        """ .../0_0_123_N.webp -> .../0_0.webp """
        filename = url.rsplit('/', 1)[-1]
        if '_' in filename:
            parts = filename.split('.')
            name_parts = parts[0].split('_')
            if len(name_parts) > 2:
                name_parts = name_parts[0:2]
            filename = '_'.join(name_parts) + '.' + parts[-1]
            return url.rsplit('/', 1)[0] + '/' + filename
        else:
            return url

    @classmethod
    def get_entry_from_dict(cls, input_dict: Dict[str, Any]) -> ConfigEntry:
        # category
        path = str(urllib.parse.urlparse(input_dict["web-scraper-start-url"]).path)
        category = path.split("/")[-2]
        # url
        url = input_dict["image-src"]
        if url.startswith("/_next"):
            url = cls._extract_url_parameter(url)
            if url is None:
                message = "Unknown URL format: %s" % input_dict["image-src"]
                logger.warning(message)
                raise ConfigEntryError(message)
        url = cls._transform_url(url)
        # prompt
        prompt = input_dict["prompt"]
        return ConfigEntry(url=url, category=category, prompt=prompt)
